{"version":3,"sources":["Components/PhoneNumber/PhoneNumber.js","Components/PhoneNumberList/PhoneNumberList.js","Components/CallNumber/CallNumber.js","App.js","serviceWorker.js","index.js"],"names":["PhoneNumber","_ref","eachNum","onClick","name","styleName","number","length","react_default","a","createElement","e","target","className","PhoneNumberList","padNum","Components_PhoneNumber_PhoneNumber","CallNumber","phoneFormat","replace","indexOf","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCreate","button","backspace","setState","state","alert","slice","phonePad","Components_CallNumber_CallNumber","Components_PhoneNumberList_PhoneNumberList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.136663b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './PhoneNumber.css';\r\n\r\nconst PhoneNumber = ({ eachNum, onClick, name, number }) => { \r\n\r\n    let styleName = \"numStyle padNumerColor\"\r\n    if(number.length === 0 && name === \"BS\"){\r\n        styleName = \"numStyle nullStyle\"\r\n    }else {\r\n        if (name === \"NU\") {\r\n            styleName = \"NUColor numStyle \"\r\n        } else if (name === \"BS\") {\r\n            styleName = \"cancel\"\r\n        } else if (name === \"CALL\") {\r\n            styleName = \"callstyle numStyle\"\r\n        } else {\r\n            styleName = \"numStyle padNumerColor\"\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button name={name} onClick={e => onClick(e.target.name)} className={styleName}>{eachNum}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PhoneNumber;","import React from 'react';\r\nimport PhoneNumber from '../PhoneNumber/PhoneNumber';\r\nimport './PhoneNumberList.css';\r\n\r\nconst PhoneNumberList = ({ padNum, onClick, number}) => {\r\n\r\n    return (\r\n        <div >\r\n            \r\n            <div className=\"numberList\" >\r\n                <PhoneNumber name=\"1\" number={number} onClick={onClick} eachNum={padNum[0]} />\r\n                <PhoneNumber name=\"2\" number={number} onClick={onClick} eachNum={padNum[1]} />\r\n                <PhoneNumber name=\"3\" number={number} onClick={onClick} eachNum={padNum[2]} />\r\n            </div>\r\n            <div className=\"numberList\">\r\n                <PhoneNumber name=\"4\" number={number} onClick={onClick} eachNum={padNum[3]} />\r\n                <PhoneNumber name=\"5\" number={number} onClick={onClick} eachNum={padNum[4]} />\r\n                <PhoneNumber name=\"6\" number={number} onClick={onClick} eachNum={padNum[5]} />\r\n            </div>\r\n            <div className=\"numberList\">\r\n                <PhoneNumber name=\"7\" number={number} onClick={onClick} eachNum={padNum[6]} />\r\n                <PhoneNumber name=\"8\" number={number} onClick={onClick} eachNum={padNum[7]} />\r\n                <PhoneNumber name=\"9\" number={number} onClick={onClick} eachNum={padNum[8]} />\r\n            </div>\r\n            <div className=\"numberList\">\r\n                <PhoneNumber name=\"*\" number={number} onClick={onClick} eachNum={padNum[9]} />\r\n                <PhoneNumber name=\"0\" number={number} onClick={onClick} eachNum={padNum[10]} />\r\n                <PhoneNumber name=\"#\" number={number} onClick={onClick} eachNum={padNum[11]} />\r\n            </div>\r\n            <div className=\"numberList\">\r\n                <PhoneNumber name=\"NU\" number={number} onClick={onClick} eachNum={padNum[12]} />\r\n                <PhoneNumber name=\"CALL\" number={number} onClick={onClick} eachNum={padNum[13]} />\r\n                <PhoneNumber name=\"BS\" number={number} onClick={onClick} eachNum={padNum[14]} />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PhoneNumberList;","import React from 'react';\r\nimport './CallNumber.css';\r\n\r\nconst CallNumber = ({number}) => {\r\n\r\n        let phoneFormat = 'number';\r\n            if(number.length === 11){\r\n                phoneFormat = number.replace(/(\\d{3})(\\d{4})(\\d{4})/, '$1-$2-$3')\r\n            }else if (number.length === 8){\r\n                phoneFormat = number.replace(/(\\d{4})(\\d{4})/, '$1-$2')\r\n            }else{\r\n                if (number.indexOf('02') === 0) {\r\n                    phoneFormat = number.replace(/(\\d{2})(\\d{3,4})(\\d{4})/, '$1-$2-$3')\r\n                } else {\r\n                    phoneFormat = number.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3')\r\n                }\r\n            }\r\n\r\n    return (\r\n        <div className=\"numberWindow\">\r\n            {/* <input type=\"number\" value={phoneFormat}></input> */}\r\n            <p>{phoneFormat}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CallNumber;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { PhoneNumberList } from './Components/PhoneNumberList';\r\nimport { CallNumber } from './Components/CallNumber';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state ={\r\n      number: \"\",\r\n      phonePad: [1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#', '', '', 'x'],\r\n    }\r\n  }\r\n\r\n  handleCreate= (button) => {\r\n    // console.log('success');\r\n\r\n    if(button === \"BS\"){\r\n      this.backspace()\r\n    }else if(button === \"NU\"){\r\n      this.setState({\r\n        number: this.state.number\r\n      })\r\n    }else if(button === \"CALL\"){\r\n      // alert(this.state.number)\r\n      const {number} = this.state;\r\n      let phoneFormat = 'number';\r\n      if (number.length === 11) {\r\n        phoneFormat = number.replace(/(\\d{3})(\\d{4})(\\d{4})/, '$1-$2-$3')\r\n      } else if (number.length === 8) {\r\n        phoneFormat = number.replace(/(\\d{4})(\\d{4})/, '$1-$2')\r\n      } else {\r\n        if (number.indexOf('02') === 0) {\r\n          phoneFormat = number.replace(/(\\d{2})(\\d{3,4})(\\d{4})/, '$1-$2-$3')\r\n        } else {\r\n          phoneFormat = number.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3')\r\n        }\r\n      }\r\n      alert(phoneFormat)\r\n    }else{\r\n      this.setState({\r\n        number: this.state.number + button\r\n      });\r\n    }\r\n  }\r\n  \r\n  backspace = () =>{\r\n    this.setState({\r\n      number: this.state.number.slice(0,-1)\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <CallNumber number={this.state.number} />\r\n        <PhoneNumberList number={this.state.number} onClick={this.handleCreate} padNum={this.state.phonePad}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}